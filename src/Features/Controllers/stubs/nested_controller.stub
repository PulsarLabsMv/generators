<?php

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Models\{{ ParentModelClassName }};
use App\Models\{{ ModelClassName }};
use Javaabu\Helpers\Traits\HasOrderbys;

class {{ ParentModelClassName }}{{ ModelClassName }}Controller
{
    use HasOrderbys;

    protected static function initOrderbys()
    {
       static::$orderbys = [
           'id'         => __('Id'),
           'created_at' => __('Created At'),
           'updated_at' => __('Updated At'),
       ];
    }

    public function index({{ ParentModelClassName }} ${{ ParentModelVariable }}, Request $request)
    {
        $this->authorize('viewAny', [{{ ModelClassName }}::class, ${{ ParentModelVariable }}]);
        $title = __('All {{ ModelClassPluralName }}');
        $order_by = $this->getOrderBy($request, 'created_at');
        $order = $this->getOrder($request, 'created_at', $order_by);
        $per_page = $this->getPerPage($request);

        ${{ ModelPluralVariable }} = ${{ ParentModelVariable }}->{{ ParentRelationship }}()->orderBy($order_by, $order);

        $search = null;
        if ($search = $request->input('search')) {
            ${{ ModelPluralVariable }}->search($search);
            $title = __('{{ ModelClassName }}s matching \:search\'', ['search' => $search]);
        }

        if ($date_field = $request->input('date_field')) {
            ${{ ModelPluralVariable }}->dateBetween($date_field, $request->input('date_from'));
        }

        ${{ ModelPluralVariable }} = ${{ ModelPluralVariable }}
                       ->with({{ IncludedRelationships }})
                       ->paginate($per_page)
                       ->append($request->except('{{ ModelVariable }}'));

        return view('admin.{{ ParentRoutePluralResourceName }}.{{ ModelRoutePluralResourceName }}.index', compact('{{ ParentModelVariable }}'));
    }

    public function create(Request $request, {{ ParentModelClassName }} ${{ ParentModelVariable }})
    {
        $this->authorize('create', [{{ ParentModelClassName }}::class, ${{ ParentModelVariable }}]);
        return view('admin.{{ ParentRoutePluralResourceName }}.{{ ModelRoutePluralResourceName }}.create', compact('${{ ParentModelVariable }}'));
    }

    public function store({{ ParentModelClassName }} ${{ ParentModelVariable }}, {{ ParentModelClassName }}{{ ModelClassName }}Request $request)
    {
        $this->authorize('create', [{{ ModelClassName }}::class, ${{ ParentModelVariable }}]);
        ${{ ModelVariable }} = new {{ ModelClassName }}($request->validated());
        {{ belongsToAssociations }}
        ${{ ModelVariable }}->save();
        {{ pivotSyncs }}

        $this->flashSuccessMessage();

        return to_route('admin.{{ ParentRoutePluralResourceName }}.{{ ModelRoutePluralResourceName }}.edit', compact('${{ ParentModelVariable }}', '${{ ModelVariable }}'));
    }

}
